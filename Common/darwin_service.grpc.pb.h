// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: darwin_service.proto
#ifndef GRPC_darwin_5fservice_2eproto__INCLUDED
#define GRPC_darwin_5fservice_2eproto__INCLUDED

#include "darwin_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {

// The darwin service.
class DarwinService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.DarwinService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Update the position of object in the world to the clients.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::UpdateResponse>> Update(::grpc::ClientContext* context, const ::proto::UpdateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::UpdateResponse>>(UpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::UpdateResponse>>(AsyncUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // Client report the change of position and speed of a player.
    virtual ::grpc::Status ReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::proto::ReportInGameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ReportInGameResponse>> AsyncReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ReportInGameResponse>>(AsyncReportInGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ReportInGameResponse>> PrepareAsyncReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ReportInGameResponse>>(PrepareAsyncReportInGameRaw(context, request, cq));
    }
    // Create a new character.
    virtual ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::proto::CreateCharacterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::CreateCharacterResponse>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::CreateCharacterResponse>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::CreateCharacterResponse>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::CreateCharacterResponse>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    // Ping the server.
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::proto::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Update the position of object in the world to the clients.
      virtual void Update(::grpc::ClientContext* context, const ::proto::UpdateRequest* request, ::grpc::ClientReadReactor< ::proto::UpdateResponse>* reactor) = 0;
      // Client report the change of position and speed of a player.
      virtual void ReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest* request, ::proto::ReportInGameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest* request, ::proto::ReportInGameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create a new character.
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest* request, ::proto::CreateCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest* request, ::proto::CreateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Ping the server.
      virtual void Ping(::grpc::ClientContext* context, const ::proto::PingRequest* request, ::proto::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::proto::PingRequest* request, ::proto::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::proto::UpdateResponse>* UpdateRaw(::grpc::ClientContext* context, const ::proto::UpdateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::ReportInGameResponse>* AsyncReportInGameRaw(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::ReportInGameResponse>* PrepareAsyncReportInGameRaw(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::CreateCharacterResponse>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::CreateCharacterResponse>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::proto::UpdateResponse>> Update(::grpc::ClientContext* context, const ::proto::UpdateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::UpdateResponse>>(UpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::UpdateResponse>>(AsyncUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status ReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::proto::ReportInGameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ReportInGameResponse>> AsyncReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ReportInGameResponse>>(AsyncReportInGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ReportInGameResponse>> PrepareAsyncReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ReportInGameResponse>>(PrepareAsyncReportInGameRaw(context, request, cq));
    }
    ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::proto::CreateCharacterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::CreateCharacterResponse>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::CreateCharacterResponse>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::CreateCharacterResponse>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::CreateCharacterResponse>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::proto::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Update(::grpc::ClientContext* context, const ::proto::UpdateRequest* request, ::grpc::ClientReadReactor< ::proto::UpdateResponse>* reactor) override;
      void ReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest* request, ::proto::ReportInGameResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportInGame(::grpc::ClientContext* context, const ::proto::ReportInGameRequest* request, ::proto::ReportInGameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest* request, ::proto::CreateCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest* request, ::proto::CreateCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Ping(::grpc::ClientContext* context, const ::proto::PingRequest* request, ::proto::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::proto::PingRequest* request, ::proto::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::proto::UpdateResponse>* UpdateRaw(::grpc::ClientContext* context, const ::proto::UpdateRequest& request) override;
    ::grpc::ClientAsyncReader< ::proto::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::ReportInGameResponse>* AsyncReportInGameRaw(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::ReportInGameResponse>* PrepareAsyncReportInGameRaw(::grpc::ClientContext* context, const ::proto::ReportInGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::CreateCharacterResponse>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::CreateCharacterResponse>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::proto::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::proto::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportInGame_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Update the position of object in the world to the clients.
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::proto::UpdateRequest* request, ::grpc::ServerWriter< ::proto::UpdateResponse>* writer);
    // Client report the change of position and speed of a player.
    virtual ::grpc::Status ReportInGame(::grpc::ServerContext* context, const ::proto::ReportInGameRequest* request, ::proto::ReportInGameResponse* response);
    // Create a new character.
    virtual ::grpc::Status CreateCharacter(::grpc::ServerContext* context, const ::proto::CreateCharacterRequest* request, ::proto::CreateCharacterResponse* response);
    // Ping the server.
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::proto::PingRequest* request, ::proto::PingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/, ::grpc::ServerWriter< ::proto::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::proto::UpdateRequest* request, ::grpc::ServerAsyncWriter< ::proto::UpdateResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportInGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportInGame() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReportInGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportInGame(::grpc::ServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportInGame(::grpc::ServerContext* context, ::proto::ReportInGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::ReportInGameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::proto::CreateCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::CreateCharacterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::proto::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Update<WithAsyncMethod_ReportInGame<WithAsyncMethod_CreateCharacter<WithAsyncMethod_Ping<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::UpdateRequest, ::proto::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::UpdateRequest* request) { return this->Update(context, request); }));
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/, ::grpc::ServerWriter< ::proto::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::UpdateResponse>* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportInGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportInGame() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::ReportInGameRequest, ::proto::ReportInGameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::ReportInGameRequest* request, ::proto::ReportInGameResponse* response) { return this->ReportInGame(context, request, response); }));}
    void SetMessageAllocatorFor_ReportInGame(
        ::grpc::MessageAllocator< ::proto::ReportInGameRequest, ::proto::ReportInGameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::ReportInGameRequest, ::proto::ReportInGameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportInGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportInGame(::grpc::ServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportInGame(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::CreateCharacterRequest, ::proto::CreateCharacterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::CreateCharacterRequest* request, ::proto::CreateCharacterResponse* response) { return this->CreateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharacter(
        ::grpc::MessageAllocator< ::proto::CreateCharacterRequest, ::proto::CreateCharacterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::CreateCharacterRequest, ::proto::CreateCharacterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::PingRequest, ::proto::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::PingRequest* request, ::proto::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::proto::PingRequest, ::proto::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::PingRequest, ::proto::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Update<WithCallbackMethod_ReportInGame<WithCallbackMethod_CreateCharacter<WithCallbackMethod_Ping<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/, ::grpc::ServerWriter< ::proto::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportInGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportInGame() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReportInGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportInGame(::grpc::ServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/, ::grpc::ServerWriter< ::proto::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportInGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportInGame() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReportInGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportInGame(::grpc::ServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportInGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Update(context, request); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/, ::grpc::ServerWriter< ::proto::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportInGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportInGame() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportInGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportInGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportInGame(::grpc::ServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportInGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportInGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportInGame() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::ReportInGameRequest, ::proto::ReportInGameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::ReportInGameRequest, ::proto::ReportInGameResponse>* streamer) {
                       return this->StreamedReportInGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportInGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportInGame(::grpc::ServerContext* /*context*/, const ::proto::ReportInGameRequest* /*request*/, ::proto::ReportInGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportInGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::ReportInGameRequest,::proto::ReportInGameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::CreateCharacterRequest, ::proto::CreateCharacterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::CreateCharacterRequest, ::proto::CreateCharacterResponse>* streamer) {
                       return this->StreamedCreateCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::proto::CreateCharacterRequest* /*request*/, ::proto::CreateCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::CreateCharacterRequest,::proto::CreateCharacterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::PingRequest, ::proto::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::PingRequest, ::proto::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::proto::PingRequest* /*request*/, ::proto::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::PingRequest,::proto::PingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportInGame<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_Ping<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::UpdateRequest, ::proto::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::UpdateRequest, ::proto::UpdateResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::proto::UpdateRequest* /*request*/, ::grpc::ServerWriter< ::proto::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::UpdateRequest,::proto::UpdateResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Update<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Update<WithStreamedUnaryMethod_ReportInGame<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_Ping<Service > > > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_darwin_5fservice_2eproto__INCLUDED
